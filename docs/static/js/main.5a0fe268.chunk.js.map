{"version":3,"sources":["types.ts","models/KeyConfig.ts","models/writeKeyConfig.ts","components/KeyConfigRow.tsx","components/KeyConfigExpansionPanel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["OsType","keyCodes","keyToKeyCode","Map","MaxButtonCount","map","key","buildEmptyConfigsWithoutCombinationButtons","combinationButtons","keyConfigs","i","push","buttonNumber","buildDefaultKeyConfigsForCombinationButtons","selectedIndexes","length","selectedCombinationButtonIndexes","combinationButtonStates","configs","isOn","tmpCombinationState","forEach","combinationButtonState","states","defaultCombinationButtons","Array","fill","defaultKeyConfigs","get","slice","applicationShortCutDefinitions","applicationName","shortcuts","functionName","general","controlOrCmd","shift","alt","applicationNames","definition","KeyConfigServiceUuid","KeyConfigCharacteristicUuid","modifierDataValue","modifier","shiftSize","device","headerBytes","configsToData","configsByButtonState","commandButtonSize","dataSize","buffer","ArrayBuffer","data","Uint8Array","combinationButtonData","set","index","config","configIndex","configData","control","gui","console","log","useStyles","makeStyles","theme","keyInput","minWidth","shortCutIndex","applicationShortCuts","findIndex","shortCut","b","a","isEqualKey","KeyConfigRow","React","memo","onChange","classes","TableRow","TableCell","align","Checkbox","checked","e","target","NativeSelect","value","Number","className","keyCode","keyConfigFromShortCut","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","KeyConfigExpansionPanel","onChangeRow","useCallback","keyConfigIndex","keyConfig","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpandMore","Typography","state","ExpansionPanelDetails","Table","size","TableHead","TableBody","useCombinationButtonStateViewStyles","isOnText","marginLeft","spacing","main","isOffText","disabled","CombinationButtonStateView","replaceAt","values","newValue","at","newValues","root","title","flexGrow","height","typeConfigCard","margin","osSelect","width","shortcutTypeControl","headerForm","keyConfigCard","keyConfigArea","checkboxGroup","flexDirection","submitButton","alignSelf","App","useState","setKeyConfigs","setCombinationButtons","undefined","osType","setOsType","application","setApplication","combinationIndex","prevKeyConfigs","nextConfigs","useMemo","os","applicationShortcut","shortcut","applicationShortCut","WINDOWS","checkedCount","filter","CssBaseline","AppBar","position","variant","Container","maxWidth","Box","display","Card","CardHeader","FormControl","InputLabel","htmlFor","inputProps","name","id","IOS","MAC","FormGroup","FormLabel","component","isSelected","FormControlLabel","newCombinationButtons","onChangeCombinationButton","label","Button","onClick","async","navigator","bluetooth","alert","requestDevice","acceptAllDevices","optionalServices","gatt","connect","getPrimaryService","services","getCharacteristic","characteristic","writeValue","disconnect","error","toString","writeKeyConfig","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a0fe268.chunk.js","sourcesContent":["export interface KeyConfig {\n  readonly buttonNumber: number;\n  readonly shift?: boolean;\n  readonly control?: boolean;\n  readonly alt?: boolean;\n  readonly gui?: boolean;\n  readonly key?: number;\n}\n\nexport interface CombinationButtonState {\n  readonly buttonNumber: number;\n  readonly isOn: boolean;\n}\n\nexport interface KeyConfigsByCombinationButtonState {\n  readonly combinationButtonStates: readonly CombinationButtonState[];\n  readonly configs: readonly KeyConfig[];\n}\n\nexport interface GeneralShortCut {\n  readonly shift?: boolean;\n  readonly alt?: boolean;\n  readonly controlOrCmd?: boolean;\n  readonly key?: number;\n}\n\nexport interface ShortCut {\n  readonly shift?: boolean;\n  readonly control?: boolean;\n  readonly alt?: boolean;\n  readonly gui?: boolean;\n  readonly key?: number;\n}\n\nexport interface ApplicationShortCut extends ShortCut {\n  readonly functionName: string;\n}\n\nexport interface ApplicationShortCutDefinitionItem {\n  readonly functionName: string;\n  readonly general?: GeneralShortCut;\n  readonly ios?: ShortCut;\n  readonly mac?: ShortCut;\n  readonly win?: ShortCut;\n}\n\nexport interface ApplicationShortCutDefinition {\n  readonly applicationName: string;\n  readonly shortcuts: ApplicationShortCutDefinitionItem[];\n}\n\nexport enum OsType {\n  IOS = 1,\n  WINDOWS,\n  MAC\n}\n\nexport type Writable<T> = { -readonly [P in keyof T]: T[P] };\n","import {\n  ApplicationShortCut,\n  ApplicationShortCutDefinition,\n  CombinationButtonState,\n  KeyConfig,\n  KeyConfigsByCombinationButtonState,\n  OsType,\n  ShortCut, Writable\n} from '../types';\n\nexport const keyCodes = [\n  ['A', 0x04],\n  ['B', 0x05],\n  ['C', 0x06],\n  ['D', 0x07],\n  ['E', 0x08],\n  ['F', 0x09],\n  ['G', 0x0a],\n  ['H', 0x0b],\n  ['I', 0x0c],\n  ['J', 0x0d],\n  ['K', 0x0e],\n  ['L', 0x0f],\n  ['M', 0x10],\n  ['N', 0x11],\n  ['O', 0x12],\n  ['P', 0x13],\n  ['Q', 0x14],\n  ['R', 0x15],\n  ['S', 0x16],\n  ['T', 0x17],\n  ['U', 0x18],\n  ['V', 0x19],\n  ['W', 0x1a],\n  ['X', 0x1b],\n  ['Y', 0x1c],\n  ['Z', 0x1d],\n  ['1', 0x1e],\n  ['2', 0x1f],\n  ['3', 0x20],\n  ['4', 0x21],\n  ['5', 0x22],\n  ['6', 0x23],\n  ['7', 0x24],\n  ['8', 0x25],\n  ['9', 0x26],\n  ['0', 0x27],\n  ['Enter', 0x28],\n  ['Esc', 0x29],\n  ['Del', 0x2a],\n  ['Tab', 0x2b],\n  ['Space', 0x2c],\n  // ['-', 0x2d],\n  // ['=', 0x2e],\n  ['[', 0x2f],\n  [']', 0x30],\n  // ['\\\\', 0x31],\n  // ['#', 0x32],\n  // [';', 0x33],\n  // ['\\'', 0x34],\n  // ['W', 0x35],\n  // [',', 0x36],\n  // ['.', 0x37],\n  // ['/', 0x38],\n  // ['Caps', 0x39],\n  ['F1', 0x3a],\n  ['F2', 0x3b],\n  ['F3', 0x3c],\n  ['F4', 0x3d],\n  ['F5', 0x3e],\n  ['F6', 0x3f],\n  ['F7', 0x40],\n  ['F8', 0x41],\n  ['F9', 0x42],\n  ['F10', 0x43],\n  ['F11', 0x44],\n  ['F12', 0x45],\n  // ['', 0x46],\n  // ['', 0x47],\n  // ['', 0x48],\n  // ['', 0x49],\n  // ['', 0x4a],\n  // ['', 0x4b],\n  // ['', 0x4c],\n  // ['', 0x4d],\n  // ['', 0x4e],\n  // ['', 0x4f],\n  // ['', 0x50],\n  // ['', 0x51],\n  // ['', 0x52],\n  // ['', 0x53],\n  // ['', 0x54],\n  // ['', 0x55],\n  // ['', 0x56],\n  // ['', 0x57],\n  // ['', 0x58],\n  // ['', 0x59],\n  // ['', 0x5a],\n  // ['', 0x5b],\n  // ['', 0x5c],\n  // ['', 0x5d],\n  // ['', 0x5e],\n  // ['', 0x5f],\n] as const;\n\nexport const keyToKeyCode = new Map<string, number>(keyCodes);\nexport const keyCodeToKey = new Map<number, string>(keyCodes.map(([key, code]) => [code, key]));\n\nexport const MaxButtonCount = 10;\n\nexport function selectedCombinationButtonIndexes(combinationButtons: boolean[]): number[] {\n  const selectedIndexes: number[] = [];\n  for (let i = 0; i < combinationButtons.length; i++) {\n    if (combinationButtons[i]) {\n      selectedIndexes.push(i);\n    }\n  }\n  return selectedIndexes;\n}\n\nfunction buildEmptyConfigsWithoutCombinationButtons(combinationButtons: boolean[]): KeyConfig[] {\n  const keyConfigs: KeyConfig[] = [];\n  for (let i = 0; i < MaxButtonCount; i++) {\n    if (!combinationButtons[i]) {\n      keyConfigs.push({ buttonNumber: i + 1 });\n    }\n  }\n  return keyConfigs;\n}\n\nexport function buildDefaultKeyConfigsForCombinationButtons(\n  combinationButtons: boolean[]\n): KeyConfigsByCombinationButtonState[] {\n  const selectedIndexes = selectedCombinationButtonIndexes(combinationButtons);\n  if (selectedIndexes.length === 0) {\n    return [{\n      combinationButtonStates: [],\n      configs: buildEmptyConfigsWithoutCombinationButtons(combinationButtons),\n    }];\n  }\n  let combinationButtonStates: CombinationButtonState[][] = [\n    [{ buttonNumber: selectedIndexes[0] + 1, isOn: false }],\n    [{ buttonNumber: selectedIndexes[0] + 1, isOn: true }],\n  ];\n  for (let i = 1; i < selectedIndexes.length; i++) {\n    const tmpCombinationState: CombinationButtonState[][] = [];\n    combinationButtonStates.forEach((combinationButtonState) => {\n      tmpCombinationState.push([...combinationButtonState, { buttonNumber: selectedIndexes[i] + 1, isOn: false }]);\n    });\n    combinationButtonStates.forEach((combinationButtonState) => {\n      tmpCombinationState.push([...combinationButtonState, { buttonNumber: selectedIndexes[i] + 1, isOn: true }]);\n    });\n    combinationButtonStates = tmpCombinationState;\n  }\n  return combinationButtonStates.map((states) => ({\n    combinationButtonStates: states,\n    configs: buildEmptyConfigsWithoutCombinationButtons(combinationButtons)\n  }));\n}\n\nexport const MaxCombinationButtonCount = 3;\nexport const defaultCombinationButtons: boolean[] = [\n  ...Array(MaxButtonCount - MaxCombinationButtonCount).fill(false),\n  ...Array(MaxCombinationButtonCount).fill(true)\n];\n\nexport const defaultKeyConfigs: readonly Readonly<KeyConfigsByCombinationButtonState>[] =\n  buildDefaultKeyConfigsForCombinationButtons(defaultCombinationButtons);\nconst mutableDefaultKeyConfigs = defaultKeyConfigs as KeyConfigsByCombinationButtonState[];\nmutableDefaultKeyConfigs[0] = {\n  combinationButtonStates: defaultKeyConfigs[0].combinationButtonStates,\n  configs: [\n    { buttonNumber: 1, key: keyToKeyCode.get('C') },\n    { buttonNumber: 2, key: keyToKeyCode.get('X') },\n    { buttonNumber: 3, key: keyToKeyCode.get('V') },\n    ...defaultKeyConfigs[0].configs.slice(3)\n  ]\n};\n\nexport const applicationShortCutDefinitions: readonly ApplicationShortCutDefinition[] = [\n  {\n    applicationName: '一般',\n    shortcuts: [\n      { functionName: 'コピー', general: { controlOrCmd: true, key: keyToKeyCode.get('C')! } },\n      { functionName: '切り取り', general: { controlOrCmd: true, key: keyToKeyCode.get('X')! } },\n      { functionName: '貼り付け', general: { controlOrCmd: true, key: keyToKeyCode.get('V')! } },\n      { functionName: '取り消し', general: { controlOrCmd: true, key: keyToKeyCode.get('Z')! } },\n    ]\n  },\n  {\n    applicationName: 'Procreate',\n    shortcuts: [\n      { functionName: 'ペイントツール', general: { key: keyToKeyCode.get('B')! } },\n      { functionName: '消しゴム', general: { key: keyToKeyCode.get('E')! } },\n      { functionName: '色選択', general: { key: keyToKeyCode.get('C')! } },\n      { functionName: '選択モード', general: { key: keyToKeyCode.get('S')! } },\n      { functionName: 'レイヤー', general: { key: keyToKeyCode.get('L')! } },\n      { functionName: 'ブラシサイズ1%増', general: { controlOrCmd: true, key: keyToKeyCode.get(']')! } },\n      { functionName: 'ブラシサイズ10%増', general: { shift: true, key: keyToKeyCode.get(']')! } },\n      { functionName: 'ブラシサイズ1%減', general: { controlOrCmd: true, key: keyToKeyCode.get('[')! } },\n      { functionName: 'ブラシサイズ10%減', general: { shift: true, key: keyToKeyCode.get('[')! } },\n      { functionName: 'コピー', general: { controlOrCmd: true, key: keyToKeyCode.get('C')! } },\n      { functionName: '切り取り', general: { controlOrCmd: true, key: keyToKeyCode.get('X')! } },\n      { functionName: '貼り付け', general: { controlOrCmd: true, key: keyToKeyCode.get('V')! } },\n      { functionName: '取り消し', general: { controlOrCmd: true, key: keyToKeyCode.get('Z')! } },\n      { functionName: 'やり直す', general: { controlOrCmd: true, shift: true, key: keyToKeyCode.get('Z')! } },\n      { functionName: 'スポイト', general: { alt: true } },\n      { functionName: 'スポイト', general: { alt: true } },\n    ]\n  },\n];\n\nexport const applicationNames = applicationShortCutDefinitions.map((definition) => definition.applicationName);\n\nexport function isEqualKey(a: number | undefined, b: number | undefined): boolean {\n  return (!a && !b) || a === b;\n}\n\nexport function isEqualShortCut(a: ShortCut, b: ShortCut): boolean {\n  return isEqualKey(a.key, b.key) &&\n    !a.shift === !b.shift &&\n    !a.control === !b.control &&\n    !a.alt === !b.alt &&\n    !a.gui === !b.gui;\n}\n\nexport function applicationShortcutsForOs(definition: ApplicationShortCutDefinition, os: OsType): readonly ApplicationShortCut[] {\n  return definition.shortcuts.map((shortcut) => {\n    const applicationShortCut: Writable<ApplicationShortCut> = { functionName: shortcut.functionName };\n    if (os === OsType.WINDOWS) {\n      if (shortcut.general?.key) { applicationShortCut.key = shortcut.general.key; }\n      applicationShortCut.shift = shortcut.general?.shift;\n      applicationShortCut.alt = shortcut.general?.alt;\n      applicationShortCut.control = shortcut.general?.controlOrCmd;\n    } else {\n      if (shortcut.general?.key) { applicationShortCut.key = shortcut.general.key; }\n      applicationShortCut.shift = shortcut.general?.shift;\n      applicationShortCut.alt = shortcut.general?.alt;\n      applicationShortCut.gui = shortcut.general?.controlOrCmd;\n    }\n    return applicationShortCut;\n  });\n}\n","import { KeyConfigsByCombinationButtonState } from '../types';\n\nconst KeyConfigServiceUuid = '34216d2d-31b5-4d74-9dc2-9817ec3e6a74';\nconst KeyConfigCharacteristicUuid = '61b41e42-3c16-4bfc-9c8a-c53b3405969b';\n\nfunction modifierDataValue(modifier: boolean | undefined, shiftSize: number): number {\n  return (modifier ? 1 : 0) << shiftSize;\n}\n\nconst headerBytes = 2;\nfunction configsToData(configsByButtonState: readonly Readonly<KeyConfigsByCombinationButtonState>[]): ArrayBuffer {\n  const commandButtonSize = configsByButtonState[0].configs.length;\n  const dataSize = headerBytes + (configsByButtonState.length * commandButtonSize * 2);\n  const buffer = new ArrayBuffer(dataSize);\n  const data = new Uint8Array(buffer);\n  const combinationButtonData = [0, 0];\n  for (const { buttonNumber } of configsByButtonState[0].combinationButtonStates) {\n    if (buttonNumber > 8) {\n      combinationButtonData[1] = combinationButtonData[1] | (0x01 << (buttonNumber - 9));\n    } else {\n      combinationButtonData[0] = combinationButtonData[0] | (0x01 << (buttonNumber - 1));\n    }\n  }\n  data.set(combinationButtonData);\n  configsByButtonState.forEach(({ configs }, index) => {\n    configs.forEach((config, configIndex) => {\n      const configData = [\n        modifierDataValue(config.control, 0) |\n        modifierDataValue(config.shift, 1) |\n        modifierDataValue(config.alt, 2) |\n        modifierDataValue(config.gui, 3),\n        config.key || 0\n      ];\n      data.set(configData, headerBytes + (commandButtonSize * 2 * index) + (configIndex * 2));\n    });\n  });\n  console.log(data);\n  return buffer;\n}\n\nlet device: BluetoothDevice | undefined;\n\nexport async function writeKeyConfig(configs: readonly Readonly<KeyConfigsByCombinationButtonState>[]) {\n  if (!navigator.bluetooth) {\n    alert('WebBLE未対応のブラウザです。');\n    return;\n  }\n\n  if (!device) {\n    device = await navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: [KeyConfigServiceUuid],\n    });\n    if (!device.gatt) {\n      alert('デバイスが見つかりませんでした。');\n      return;\n    }\n  }\n\n  try {\n    console.log('start connect');\n    const gatt = await device.gatt!.connect();\n    console.log('gatt');\n    const services = await gatt.getPrimaryService(KeyConfigServiceUuid);\n    console.log('services');\n    const characteristic = await services.getCharacteristic(KeyConfigCharacteristicUuid);\n    console.log('characteristic');\n    const buffer = configsToData(configs);\n    await characteristic.writeValue(buffer);\n    alert(\"書き込み完了しました。\");\n    gatt.disconnect();\n  } catch (error) {\n    alert('なんかエラー出た…');\n    console.error(error.toString());\n  }\n}\n","import React from 'react';\nimport { ApplicationShortCut, KeyConfig } from '../types';\nimport { Checkbox, makeStyles, NativeSelect, TableCell, TableRow } from '@material-ui/core';\nimport { isEqualShortCut, keyCodes } from '../models/KeyConfig';\n\nconst useStyles = makeStyles(theme => ({\n  keyInput: {\n    minWidth: 70,\n  },\n}));\n\ninterface KeyConfigRowProps {\n  readonly config: KeyConfig;\n  readonly index: number;\n  readonly onChange: (index: number, key: KeyConfig) => void;\n  readonly applicationShortCuts: readonly ApplicationShortCut[] | undefined;\n}\n\nfunction keyConfigFromShortCut(applicationShortCuts: readonly ApplicationShortCut[], buttonNumber: number, index: any): KeyConfig {\n  return { buttonNumber, ...(index ? applicationShortCuts[Number(index)] : {}) };\n}\n\nfunction shortCutIndex(\n  applicationShortCuts: readonly ApplicationShortCut[],\n  config: KeyConfig\n): number | '' {\n  const index = applicationShortCuts.findIndex((shortCut) => isEqualShortCut(shortCut, config));\n  return index < 0 ? '' : index;\n}\n\nexport const KeyConfigRow = React.memo<KeyConfigRowProps>(({ config, index, onChange, applicationShortCuts }) => {\n  const classes = useStyles();\n  return (\n    <TableRow>\n      <TableCell align=\"center\">\n        {config.buttonNumber}\n      </TableCell>\n      <TableCell align=\"center\">\n        <Checkbox checked={!!config.shift} onChange={(e) => onChange(index, { ...config, shift: e.target.checked })} />\n      </TableCell>\n      <TableCell align=\"center\">\n        <Checkbox checked={!!config.control} onChange={(e) => onChange(index, { ...config, control: e.target.checked })} />\n      </TableCell>\n      <TableCell align=\"center\">\n        <Checkbox checked={!!config.alt} onChange={(e) => onChange(index, { ...config, alt: e.target.checked })} />\n      </TableCell>\n      <TableCell align=\"center\">\n        <Checkbox checked={!!config.gui} onChange={(e) => onChange(index, { ...config, gui: e.target.checked })} />\n      </TableCell>\n      <TableCell align=\"center\">\n        <NativeSelect\n          value={config.key || ''}\n          onChange={(e) => onChange(index, { ...config, key: e.target.value ? Number(e.target.value) : 0})}\n          className={classes.keyInput}\n        >\n          <option value=\"\" />\n          {keyCodes.map(([key, keyCode]) => (\n            <option key={key} value={keyCode}>{key}</option>\n          ))}\n        </NativeSelect>\n      </TableCell>\n      {applicationShortCuts &&\n        <TableCell align=\"center\">\n          <NativeSelect\n            value={shortCutIndex(applicationShortCuts, config)}\n            onChange={(e) => onChange(index, keyConfigFromShortCut(applicationShortCuts, config.buttonNumber, e.target.value))}\n            className={classes.keyInput}\n          >\n            <option value=\"\" />\n            {applicationShortCuts.map(({ functionName }, index) => (\n              <option key={index} value={index}>{functionName}</option>\n            ))}\n          </NativeSelect>\n        </TableCell>\n      }\n    </TableRow>\n  );\n});\n","import React, { useCallback } from 'react';\nimport { ApplicationShortCut, CombinationButtonState, KeyConfig } from '../types';\nimport {\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography\n} from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\nimport { KeyConfigRow } from './KeyConfigRow';\n\ninterface KeyConfigExpansionPanelProps {\n  readonly configs: readonly KeyConfig[];\n  readonly combinationButtonStates: readonly CombinationButtonState[];\n  readonly index: number;\n  readonly onChange: (combinationIndex: number, configIndex: number, keyConfig: KeyConfig) => void;\n  readonly applicationShortCuts: readonly ApplicationShortCut[] | undefined;\n}\n\nconst useStyles = makeStyles(theme => ({\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport const KeyConfigExpansionPanel = React.memo<KeyConfigExpansionPanelProps>((\n  { configs, combinationButtonStates, index, onChange, applicationShortCuts }\n) => {\n  const classes = useStyles();\n  const onChangeRow = useCallback((keyConfigIndex: number, keyConfig: KeyConfig) => {\n    onChange(index, keyConfigIndex, keyConfig);\n  }, [index, onChange]);\n  return (\n    <ExpansionPanel defaultExpanded={index === 0}>\n      <ExpansionPanelSummary expandIcon={<ExpandMore />}>\n        <Typography className={classes.heading}>キー設定</Typography>\n        <Typography className={classes.secondaryHeading}>組み合わせボタン : </Typography>\n        {combinationButtonStates.map((combinationButtonState, index) => (\n          <CombinationButtonStateView key={combinationButtonState.buttonNumber} state={combinationButtonState}/>\n        ))}\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Button</TableCell>\n              <TableCell align=\"center\">Shift</TableCell>\n              <TableCell align=\"center\">Ctrl</TableCell>\n              <TableCell align=\"center\">Alt</TableCell>\n              <TableCell align=\"center\">CMD/WIN</TableCell>\n              <TableCell align=\"center\">キー</TableCell>\n              {applicationShortCuts &&\n                <TableCell align=\"center\">ショートカット</TableCell>\n              }\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {configs.map((keyConfig, keyConfigIndex) => {\n              return <KeyConfigRow\n                key={keyConfigIndex}\n                index={keyConfigIndex}\n                config={keyConfig}\n                onChange={onChangeRow}\n                applicationShortCuts={applicationShortCuts}\n              />\n            })}\n          </TableBody>\n        </Table>\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  );\n});\n\nconst useCombinationButtonStateViewStyles = makeStyles(theme => ({\n  isOnText: {\n    fontSize: theme.typography.pxToRem(15),\n    marginLeft: theme.spacing(1),\n    color: theme.palette.secondary.main,\n  },\n  isOffText: {\n    fontSize: theme.typography.pxToRem(15),\n    marginLeft: theme.spacing(1),\n    color: theme.palette.text.disabled,\n  },\n}));\n\nconst CombinationButtonStateView: React.FC<{ state: CombinationButtonState }> = ({ state }) => {\n  const classes = useCombinationButtonStateViewStyles();\n  if (state.isOn) {\n    return <Typography className={classes.isOnText}>ON({state.buttonNumber})</Typography>;\n  } else {\n    return <Typography className={classes.isOffText}>OFF({state.buttonNumber})</Typography>;\n  }\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport './App.css';\nimport {\n  AppBar,\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  Checkbox,\n  Container,\n  CssBaseline,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  makeStyles,\n  Typography\n} from '@material-ui/core';\nimport {\n  applicationNames,\n  applicationShortCutDefinitions, applicationShortcutsForOs,\n  buildDefaultKeyConfigsForCombinationButtons,\n  defaultCombinationButtons,\n  defaultKeyConfigs,\n  MaxCombinationButtonCount\n} from './models/KeyConfig';\nimport { ApplicationShortCut, KeyConfig, KeyConfigsByCombinationButtonState, OsType } from './types';\nimport { writeKeyConfig } from './models/writeKeyConfig';\nimport { KeyConfigExpansionPanel } from './components/KeyConfigExpansionPanel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport NativeSelect from '@material-ui/core/NativeSelect';\n\nfunction replaceAt<T>(values: readonly T[], newValue: T, at: number): T[] {\n  const newValues = [...values];\n  newValues[at] = newValue;\n  return newValues;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n  },\n  title: {\n    flexGrow: 1,\n    height: 40,\n  },\n  typeConfigCard: {\n    margin: theme.spacing(2),\n  },\n  osSelect: {\n    margin: theme.spacing(2),\n    width: 80\n  },\n  shortcutTypeControl: {\n    margin: theme.spacing(2),\n    width: 180\n  },\n  headerForm: {\n    margin: theme.spacing(2),\n  },\n  keyConfigCard: {\n    margin: theme.spacing(2),\n  },\n  keyConfigArea: {\n    margin: theme.spacing(2),\n  },\n  checkboxGroup: {\n    flexDirection: 'row'\n  },\n  submitButton: {\n    margin: theme.spacing(2),\n    alignSelf: 'flex-end',\n  },\n}));\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const [keyConfigs, setKeyConfigs] = useState<readonly Readonly<KeyConfigsByCombinationButtonState>[]>(defaultKeyConfigs);\n  const [combinationButtons, setCombinationButtons] = useState<boolean[]>(defaultCombinationButtons);\n  const [osType, setOsType] = useState<OsType | undefined>(undefined);\n  const [application, setApplication] = useState<string | undefined>(undefined);\n  const onChange = useCallback((combinationIndex: number, configIndex: number, keyConfig: KeyConfig) => {\n    setKeyConfigs((prevKeyConfigs) => {\n      const nextConfigs = replaceAt(prevKeyConfigs[combinationIndex].configs, keyConfig, configIndex);\n      return replaceAt(prevKeyConfigs, { ...prevKeyConfigs[combinationIndex], configs: nextConfigs }, combinationIndex);\n    });\n  }, []);\n  const applicationShortCuts = useMemo<readonly ApplicationShortCut[] | undefined>(() => {\n    if (!osType || !application) { return undefined; }\n    const index = applicationShortCutDefinitions.findIndex((applicationShortcut) => {\n      return applicationShortcut.applicationName === application;\n    });\n    if (index < 0) { return undefined; }\n    return applicationShortcutsForOs(applicationShortCutDefinitions[index], osType);\n  }, [application, osType]);\n  const onChangeCombinationButton = (index: number, checked: boolean) => {\n    const newCombinationButtons = replaceAt(combinationButtons, checked, index);\n    setCombinationButtons(newCombinationButtons);\n    setKeyConfigs(buildDefaultKeyConfigsForCombinationButtons(newCombinationButtons));\n  };\n  const checkedCount = combinationButtons.filter((value) => value).length;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Typography variant=\"h6\" className={classes.title}>\n          fuzzilia 左手デバイス 設定ツール\n        </Typography>\n      </AppBar>\n      <Container maxWidth=\"md\">\n        <Box display=\"flex\" flexDirection=\"column\">\n          <Card className={classes.typeConfigCard}>\n            <CardHeader title=\"全体設定\" />\n            <Box display=\"flex\" flexDirection=\"column\">\n              <Box display=\"flex\" flexDirection=\"row\">\n                <FormControl className={classes.shortcutTypeControl}>\n                  <InputLabel htmlFor=\"shortcut-type\">アプリケーション</InputLabel>\n                  <NativeSelect\n                    value={application}\n                    onChange={(e) => setApplication(e.target.value || undefined)}\n                    inputProps={{\n                      name: 'application',\n                      id: 'application',\n                    }}\n                  >\n                    <option value=\"\" />\n                    {applicationNames.map((applicationName) =>\n                      <option key={applicationName} value={applicationName}>{applicationName}</option>)}\n                  </NativeSelect>\n                </FormControl>\n                <FormControl className={classes.osSelect}>\n                  <InputLabel htmlFor=\"shortcut-type\">OS</InputLabel>\n                  <NativeSelect\n                    value={osType}\n                    onChange={(e) => setOsType(e.target.value ? Number(e.target.value) : undefined)}\n                    inputProps={{\n                      name: 'os-type',\n                      id: 'os-type',\n                    }}\n                  >\n                    <option value=\"\" />\n                    <option value={OsType.IOS}>iOS</option>\n                    <option value={OsType.MAC}>Mac</option>\n                    <option value={OsType.WINDOWS}>Windows</option>\n                  </NativeSelect>\n                </FormControl>\n              </Box>\n              <FormControl className={classes.headerForm}>\n                <FormGroup>\n                  <FormLabel component=\"legend\">組み合わせボタン</FormLabel>\n                  <Box className={classes.checkboxGroup}>\n                    {combinationButtons.map((isSelected, index) => (\n                      <FormControlLabel\n                        key={index}\n                        control={<Checkbox checked={isSelected} onChange={(e, checked) => onChangeCombinationButton(index, checked)} />}\n                        label={index + 1}\n                        disabled={checkedCount >= MaxCombinationButtonCount && !isSelected}\n                      />\n                    ))}\n                  </Box>\n                </FormGroup>\n              </FormControl>\n            </Box>\n          </Card>\n          <Box className={classes.keyConfigArea}>\n            {keyConfigs.map((keyConfig, index) => (\n              <KeyConfigExpansionPanel\n                key={index}\n                {...keyConfig}\n                index={index}\n                onChange={onChange}\n                applicationShortCuts={applicationShortCuts}\n              />\n            ))}\n          </Box>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => writeKeyConfig(keyConfigs)}\n            className={classes.submitButton}\n          >\n            書き込み\n          </Button>\n        </Box>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}